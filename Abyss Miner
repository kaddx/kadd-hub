local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Abyss Miner ",
    SubTitle = "by kadd - https://discord.gg/kaddhub",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Notification",
        Content = "Welcome to Kadd Hub",
        SubContent = "Enjoy!", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })
end

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    Main2 = Window:AddTab({ Title = "Teleport", Icon = "flag" }),
    Main3 = Window:AddTab({ Title = "Mobs", Icon = "bug" }),
    Main4 = Window:AddTab({ Title = "Player", Icon = "user" }),
}



local pickaxes = {
    ["Rusty Pickaxe"] = {3, "Standard", false, "Rusty Pickaxe", 1},
    ["Silver Pickaxe"] = {13, "Standard", false, "Silver Pickaxe", 0.85},
    ["Lead Pickaxe"] = {5, "Standard", false, "Lead Pickaxe", 1},
    ["Iron Pickaxe"] = {10, "Standard", false, "Iron Pickaxe", 1},
    ["Heavy Pickaxe"] = {45, "Heavy", false, "Heavy Pickaxe", 1.3},
    ["Xplr. Pickaxe Tier-2"] = {30, "Standard", false, "Xplr. Pickaxe Tier-2", 0.85},
    ["Xplr. Pickaxe"] = {20, "Standard", false, "Xplr. Pickaxe", 0.85},
    ["Drill Lance"] = {15, "Drill", false, "Drill Lance", 0.3},
    ["Drill Lance Tier-2"] = {55, "Drill", false, "Drill Lance Tier-2", 0.25},
    ["Heavy Pickaxe Tier-2"] = {150, "Standard", false, "Heavy Pickaxe Tier-2", 1.2},
    ["MXplr.Pickaxe"] = {100, "Standard", false, "MXplr.Pickaxe", 0.85},
    ["MXplr.Pickaxe Tier-2"] = {200, "Standard", false, "MXplr.Pickaxe Tier-2", 0.85},
    ["Cragsplitter"] = {300, "Heavy", false, "Cragsplitter", 1.2},
    ["Chasm Smasher"] = {450, "Heavy", false, "Chasm Smasher", 1.2},
    ["[Relic]Spiral Drill of Abyss"] = {90, "Drill", false, "[Relic]Spiral Drill of Abyss", 0.2},
}

local selectedPickaxe = "Rusty Pickaxe"
local attacking = false
local LocalPlayer = game:GetService("Players").LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local Toggle = Tabs.Main:AddToggle("AutoFarmToggle", {
    Title = "Auto Fast Mine",
    Default = false
})

Toggle:OnChanged(function(value)
    attacking = value

    if attacking then
        task.spawn(function()
            local swingState = true

            while attacking do
                -- HitBox
                local args = pickaxes[selectedPickaxe]
                if args then
                    ReplicatedStorage.RemoteEvent.HitBox:FireServer(table.unpack(args))
                end

                -- Swing
                local playerModel = Workspace:FindFirstChild(LocalPlayer.Name)
                if playerModel and playerModel:FindFirstChild("Main Tool") then
                    local swing = playerModel["Main Tool"]:FindFirstChild("Swing")
                    if swing then
                        local swingArgs = swingState and {true, false} or {false, false}
                        swing:FireServer(table.unpack(swingArgs))
                        swingState = not swingState
                    end
                end

                task.wait(0.01)
            end
        end)
    end
end)

local Dropdown = Tabs.Main:AddDropdown("PickaxeDropdown", {
    Title = "Choose Pickaxe",
    Values = {
        "Rusty Pickaxe",
        "Silver Pickaxe",
        "Lead Pickaxe",
        "Iron Pickaxe",
        "Heavy Pickaxe",
        "Xplr. Pickaxe Tier-2",
        "Xplr. Pickaxe",
        "MXplr.Pickaxe",
        "Heavy Pickaxe Tier-2",
        "Drill Lance",
        "Drill Lance Tier-2",
        "Cragsplitter",
        "MXplr.Pickaxe Tier-2",
        "Chasm Smasher",
        "[Relic]Spiral Drill of Abyss"
    },
    Multi = false,
    Default = 1,
})

Dropdown:OnChanged(function(value)
    selectedPickaxe = value
end)

Dropdown:SetValue("Rusty Pickaxe")
Toggle:SetValue(false)



local sellEnabled = false

local Toggle = Tabs.Main:AddToggle("Auto Sell", {
    Title = "Auto Sell",
    Default = false
})

Toggle:OnChanged(function(value)
    sellEnabled = value
end)

-- Pętla auto-sellu
task.spawn(function()
    while true do
        task.wait(1) -- co ile sekund ma sprzedawać? Możesz zmienić np. na 0.5
        if sellEnabled then
            local npc = workspace.Map["Layer 1"].Npcs["Rei ' The professer"].Rei
            if npc and npc:FindFirstChild("HumanoidRootPart") and npc.HumanoidRootPart:FindFirstChild("Dialogue") then
                game:GetService("ReplicatedStorage").RemoteEvent.SellAllInventory:FireServer(
                    npc,
                    npc.HumanoidRootPart.Dialogue
                )
            end
        end
    end
end)

Tabs.Main2:AddButton({
    Title = "Teleport to Surface",
    Callback = function()
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        local character = LocalPlayer.Character

        if character and character:FindFirstChild("HumanoidRootPart") then
            character.HumanoidRootPart.CFrame = CFrame.new(53, 13, -11)
        end
    end
})



-- asdassdsadasdddddddddddddddd

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local enabled = false
local selectedOres = {}

-- Toggle
local Toggle = Tabs.Main:AddToggle("OreTP_Toggle", {
    Title = "Auto Teleport to Ores",
    Default = false
})

local Clip = true
local NoclipConnection

-- Funkcje noclipa
local function noclip()
    Clip = false
    if NoclipConnection then NoclipConnection:Disconnect() end

    NoclipConnection = RunService.Stepped:Connect(function()
        if not Clip and LocalPlayer.Character then
            for _, v in pairs(LocalPlayer.Character:GetDescendants()) do
                if v:IsA("BasePart") and v.CanCollide then
                    v.CanCollide = false
                end
            end
        end
    end)
end

local function clip()
    Clip = true
    if NoclipConnection then
        NoclipConnection:Disconnect()
        NoclipConnection = nil
    end
end

Toggle:OnChanged(function(value)
    enabled = value
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")

    if value then
        noclip()
        if hrp and not hrp:FindFirstChild("BodyPosition") then
            local bodyPos = Instance.new("BodyPosition")
            bodyPos.MaxForce = Vector3.new(1e5, 1e5, 1e5)
            bodyPos.P = 1e4
            bodyPos.Position = hrp.Position
            bodyPos.Name = "BodyPosition"
            bodyPos.Parent = hrp
        end
    else
        clip()
        if hrp then
            local bodyPos = hrp:FindFirstChild("BodyPosition")
            if bodyPos then bodyPos:Destroy() end
        end
    end
end)

LocalPlayer.CharacterAdded:Connect(function()
    if enabled then
        task.wait(1)
        noclip()
        local hrp = LocalPlayer.Character:WaitForChild("HumanoidRootPart")
        if hrp and not hrp:FindFirstChild("BodyPosition") then
            local bodyPos = Instance.new("BodyPosition")
            bodyPos.MaxForce = Vector3.new(1e5, 1e5, 1e5)
            bodyPos.P = 1e4
            bodyPos.Position = hrp.Position
            bodyPos.Name = "BodyPosition"
            bodyPos.Parent = hrp
        end
    end
end)

-- Dropdown
local OreDropdown = Tabs.Main:AddDropdown("OreTypeSelect", {
    Title = "Select Ores",
    Multi = true,
    Values = {
        "StoneOre", "BigStoneOre", "MossStone", "CubeStone", "VineDeepWood",
        "QuartzStone", "TheOldGrave", "TheOldGraveElder", "LayeredStone",
        "FungGrassStone", "BigCoolGrass", "HeatedMagmaRock", "MagmaStone",
        "ObsidianRock", "Caelurock", "Zuker Egg", "Big Zuker Egg",
        "ShapeStone", "AquaCrystalNode", "BigRubyTreeNode", "StarGreenCrystal", "KingStone", "RelicNodeTierRare", "RelicNodeTierCommon"
    },
    Default = {""}
})

OreDropdown:OnChanged(function(value)
    selectedOres = {}
    for oreName, isSelected in pairs(value) do
        if isSelected then
            table.insert(selectedOres, oreName)
        end
    end
end)

local function teleportTo(position)
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    local bodyPos = hrp:FindFirstChild("BodyPosition")
    if bodyPos then
        bodyPos:Destroy() -- tymczasowo usuń, żeby teleport nie był blokowany
    end

    hrp.CFrame = CFrame.new(position + Vector3.new(0, 3, 0))

    if enabled then
        bodyPos = Instance.new("BodyPosition")
        bodyPos.MaxForce = Vector3.new(1e5, 1e5, 1e5)
        bodyPos.P = 1e4
        bodyPos.Position = hrp.Position
        bodyPos.Name = "BodyPosition"
        bodyPos.Parent = hrp
    end
end


-- Główna pętla teleportu
task.spawn(function()
    while true do
        task.wait(0.01)

        if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            repeat task.wait(0.2)
                LocalPlayer.Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            until LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        end

        if enabled and #selectedOres > 0 then
            local layer1 = workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("Layer 1")
            if layer1 then
                for _, areaName in ipairs({"StoneArea", "StoneArea2"}) do
                    local area = layer1:FindFirstChild(areaName)
                    if area then
                        local amount = area:FindFirstChild("Amount")
                        if amount then
                            for _, ore in pairs(amount:GetChildren()) do
                                if table.find(selectedOres, ore.Name) then
                                    local center = ore:FindFirstChild("Center")
                                    if center and center:IsA("BasePart") then
                                        teleportTo(center.Position)
                                        repeat task.wait(0.01)
                                        until not ore:IsDescendantOf(game) or not enabled
                                        if not enabled then break end
                                    end
                                end
                            end
                        end
                    end
                end
            end

            local oreArea = workspace:FindFirstChild("OreArea")
            if oreArea then
                for _, folderName in ipairs({"StoneInGreanHeaven", "StoneInGreanHeaven2"}) do
                    local folder = oreArea:FindFirstChild(folderName)
                    if folder then
                        for _, oreGroup in pairs(folder:GetChildren()) do
                            local amount = oreGroup:FindFirstChild("Amount")
                            if amount then
                                for _, ore in pairs(amount:GetChildren()) do
                                    if table.find(selectedOres, ore.Name) then
                                        local center = ore:FindFirstChild("Center")
                                        if center then
                                            teleportTo(center.Position)
                                            repeat task.wait(0.01)
                                            until not ore:IsDescendantOf(game) or not enabled
                                            if not enabled then break end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end

                for _, regionType in ipairs({"Vine", "GraveStone", "ArchWood"}) do
                    local container = oreArea:FindFirstChild(regionType)
                    if container then
                        for _, region in pairs(container:GetChildren()) do
                            local amount = region:FindFirstChild("Amount")
                            if amount then
                                for _, ore in pairs(amount:GetChildren()) do
                                    if table.find(selectedOres, ore.Name) then
                                        local center = ore:FindFirstChild("Center")
                                        if center then
                                            teleportTo(center.Position)
                                            repeat task.wait(0.01)
                                            until not ore:IsDescendantOf(game) or not enabled
                                            if not enabled then break end
                                        end
                                    end
                                end
                                if regionType == "ArchWood" then
                                    local big = amount:FindFirstChild("BigCoolGrass")
                                    if big and table.find(selectedOres, "BigCoolGrass") then
                                        local center = big:FindFirstChild("Center")
                                        if center then
                                            teleportTo(center.Position)
                                            repeat task.wait(0.01)
                                            until not big:IsDescendantOf(game) or not enabled
                                            if not enabled then break end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end

                local cave2 = oreArea:FindFirstChild("Cave2Stone")
                if cave2 then
                    for _, area in pairs(cave2:GetChildren()) do
                        local amount = area:FindFirstChild("Amount")
                        if amount then
                            for _, ore in pairs(amount:GetChildren()) do
                                if ore.Name == "LayeredStone" and table.find(selectedOres, "LayeredStone") then
                                    local center = ore:FindFirstChild("Center")
                                    if center then
                                        teleportTo(center.Position)
                                        repeat task.wait(0.01)
                                        until not ore:IsDescendantOf(game) or not enabled
                                        if not enabled then break end
                                    end
                                end
                            end
                        end
                    end
                end

                local heated = oreArea:FindFirstChild("HeatedMagmaRock")
                if heated then
                    for _, area in pairs(heated:GetChildren()) do
                        local amount = area:FindFirstChild("Amount")
                        if amount then
                            local ore = amount:FindFirstChild("HeatedMagmaRock")
                            if ore and table.find(selectedOres, "HeatedMagmaRock") then
                                local center = ore:FindFirstChild("Center")
                                if center then
                                    teleportTo(center.Position)
                                    repeat task.wait(0.01)
                                    until not ore:IsDescendantOf(game) or not enabled
                                    if not enabled then break end
                                end
                            end
                        end
                    end
                end

                local magma = oreArea:FindFirstChild("MagmaRock")
                if magma then
                    for _, area in pairs(magma:GetChildren()) do
                        local amount = area:FindFirstChild("Amount")
                        if amount then
                            for _, ore in pairs(amount:GetChildren()) do
                                if ore.Name == "MagmaStone" and table.find(selectedOres, "MagmaStone") then
                                    local center = ore:FindFirstChild("Center")
                                    if center then
                                        teleportTo(center.Position)
                                        repeat task.wait(0.01)
                                        until not ore:IsDescendantOf(game) or not enabled
                                        if not enabled then break end
                                    end
                                end
                            end
                        end
                    end
                end

                local obs = oreArea:FindFirstChild("Obsidian")
                if obs then
                    for _, area in pairs(obs:GetChildren()) do
                        local amount = area:FindFirstChild("Amount")
                        if amount then
                            for _, ore in pairs(amount:GetChildren()) do
                                if ore.Name == "ObsidianRock" and table.find(selectedOres, "ObsidianRock") then
                                    local center = ore:FindFirstChild("Center")
                                    if center then
                                        teleportTo(center.Position)
                                        repeat task.wait(0.01)
                                        until not ore:IsDescendantOf(game) or not enabled
                                        if not enabled then break end
                                    end
                                end
                            end
                        end
                    end
                end

                local purple = oreArea:FindFirstChild("Purple Sweap")
                if purple then
                    for _, area in pairs(purple:GetChildren()) do
                        local amount = area:FindFirstChild("Amount")
                        if amount then
                            for _, ore in pairs(amount:GetChildren()) do
                                if ore.Name == "Caelurock" and table.find(selectedOres, "Caelurock") then
                                    local center = ore:FindFirstChild("Center")
                                    if center then
                                        teleportTo(center.Position)
                                        repeat task.wait(0.01)
                                        until not ore:IsDescendantOf(game) or not enabled
                                        if not enabled then break end
                                    end
                                end
                            end
                        end
                    end
                end

                local aqua = oreArea:FindFirstChild("AquaCrystalNode")
                if aqua then
                    local node = aqua:FindFirstChild("AquaCrystalNode")
                    if node and node:FindFirstChild("Amount") then
                        for _, ore in pairs(node.Amount:GetChildren()) do
                            if ore.Name == "AquaCrystalNode" and table.find(selectedOres, "AquaCrystalNode") then
                                local center = ore:FindFirstChild("Center")
                                if center then
                                    teleportTo(center.Position)
                                    repeat task.wait(0.01)
                                    until not ore:IsDescendantOf(game) or not enabled
                                    if not enabled then break end
                                end
                            end
                        end
                    end
                end

                local spider = oreArea:FindFirstChild("SpiderEgg")
                if spider then
                    for _, area in pairs(spider:GetChildren()) do
                        local amount = area:FindFirstChild("Amount")
                        if amount then
                            for _, ore in pairs(amount:GetChildren()) do
                                if table.find(selectedOres, ore.Name) and (ore.Name == "Zuker Egg" or ore.Name == "Big Zuker Egg") then
                                    local center = ore:FindFirstChild("Center")
                                    if center then
                                        teleportTo(center.Position)
                                        repeat task.wait(0.01)
                                        until not ore:IsDescendantOf(game) or not enabled
                                        if not enabled then break end
                                    end
                                end
                            end
                        end
                    end
                end
                
                local rubyTree = workspace:FindFirstChild("RubyTree")
if rubyTree then
    local stoneArea = rubyTree:FindFirstChild("StoneArea")
    if stoneArea then
        local amount = stoneArea:FindFirstChild("Amount")
        if amount then
            local bigRubyNode = amount:FindFirstChild("BigRubyTreeNode")
            if bigRubyNode then
                local center = bigRubyNode:FindFirstChild("Center")
                if center and table.find(selectedOres, "BigRubyTreeNode") then
                    teleportTo(center.Position)
                    repeat task.wait(0.01)
                    until not bigRubyNode:IsDescendantOf(game) or not enabled
                end
            end
        end
    end
end

local oreArea = workspace:FindFirstChild("OreArea")
if oreArea then
    local graveStone = oreArea:FindFirstChild("GraveStone")
    if graveStone then
        for _, region in pairs(graveStone:GetChildren()) do
            local amount = region:FindFirstChild("Amount")
            if amount then
                for _, ore in pairs(amount:GetChildren()) do
                    if ore.Name == "King Stone" and table.find(selectedOres, "King Stone") then
                        local center = ore:FindFirstChild("Center")
                        if center then
                            teleportTo(center.Position)
                            repeat task.wait(0.01)
                            until not ore:IsDescendantOf(game) or not enabled
                            if not enabled then break end
                        end
                    end
                end
            end
        end
    end
end


local trees = workspace:GetChildren()
for _, tree in ipairs(trees) do
    if tree:IsA("Model") and tree.Name == "Tree" then
        local testArea = tree:FindFirstChild("TestArea")
        if testArea then
            local amount = testArea:FindFirstChild("Amount")
            if amount then
                for _, ore in pairs(amount:GetChildren()) do
                    if ore.Name == "StarGreenCrystal" and table.find(selectedOres, "StarGreenCrystal") then
                        local center = ore:FindFirstChild("Center")
                        if center then
                            teleportTo(center.Position)
                            repeat task.wait(0.01)
                            until not ore:IsDescendantOf(game) or not enabled
                            if not enabled then break end
                        end
                    end
                end
            end
        end
    end
end


local oreArea = workspace
local relicNodes = {"RelicNodeTierRare", "RelicNodeTierCommon"}

for _, model in pairs(oreArea:GetChildren()) do
    local bigRoot = model:FindFirstChild("Big root")
    if bigRoot then
        local amount = bigRoot:FindFirstChild("Amount")
        if amount then
            for _, nodeName in ipairs(relicNodes) do
                local relicNode = amount:FindFirstChild(nodeName)
                if relicNode and table.find(selectedOres, nodeName) then
                    local center = relicNode:FindFirstChild("Center")
                    if center then
                        teleportTo(center.Position)
                        repeat task.wait(0.01)
                        until not relicNode:IsDescendantOf(game) or not enabled
                        if not enabled then break end
                    end
                end
            end
        end
    end
end



                local quartz = oreArea:FindFirstChild("Quartz-Cave")
                if quartz then
                    local stoneLayer = quartz:FindFirstChild("StoneArea-Layer1")
                    if stoneLayer and stoneLayer:FindFirstChild("Amount") then
                        for _, ore in pairs(stoneLayer.Amount:GetChildren()) do
                            if ore.Name == "QuartzStone" and table.find(selectedOres, "QuartzStone") then
                                local center = ore:FindFirstChild("Center")
                                if center then
                                    teleportTo(center.Position)
                                    repeat task.wait(0.01)
                                    until not ore:IsDescendantOf(game) or not enabled
                                    if not enabled then break end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end)


local function disableBodyPosition()
    local char = LocalPlayer.Character
    if not char then return end

    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    local bp = hrp:FindFirstChild("BodyPosition")
    if bp then
        bp:Destroy()
    end
end

local function enableBodyPosition()
    local char = LocalPlayer.Character
    if not char then return end

    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    -- sprawdź czy już istnieje
    if hrp:FindFirstChild("BodyPosition") then return end

    local bodyPos = Instance.new("BodyPosition")
    bodyPos.MaxForce = Vector3.new(1e5, 1e5, 1e5)
    bodyPos.P = 1e4
    bodyPos.Position = hrp.Position
    bodyPos.Parent = hrp
end



Tabs.Main:AddButton({
    Title = "Render All Ores",
    Description = "Teleports through all ore positions",
    Callback = function()
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        local LocalPlayer = Players.LocalPlayer
        local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local hrp = char:WaitForChild("HumanoidRootPart")

        -- Włączenie noclip
        local noclipConn
        noclipConn = RunService.Stepped:Connect(function()
            if char and hrp and char:FindFirstChildOfClass("Humanoid") then
                char:FindFirstChildOfClass("Humanoid"):ChangeState(11) -- Noclip state
            end
        end)

        -- Lista pozycji do teleportu
        local positions = {
            Vector3.new(291, -456, 28),
            Vector3.new(315, -278, -87),
            Vector3.new(195, -517, -172),
            Vector3.new(589, -724, -18),
            Vector3.new(-534, -365, 229),
            Vector3.new(90, -744, 177),
            Vector3.new(-82, -963, 84),
            Vector3.new(21, -905, 372),
            Vector3.new(72, -748, 141),
            Vector3.new(27, -826, 137),
            Vector3.new(-5, -768, -39),
            Vector3.new(-47, -157, -160),
            Vector3.new(508, -718, 220),
            Vector3.new(-133, -856, -513),
            Vector3.new(51, -732, 557),
        }

        task.spawn(function()
            for _, pos in ipairs(positions) do
                if hrp then
                    hrp.CFrame = CFrame.new(pos)
                end
                task.wait(0.1)
            end

            -- Ostatnia pozycja końcowa
            if hrp then
                hrp.CFrame = CFrame.new(53, 12.7, -11)
            end

            -- Wyłączenie noclipu po wszystkim
            if noclipConn then
                noclipConn:Disconnect()
            end
        end)
    end
})



Tabs.Main:AddButton({
    Title = "Open Rank Up GUI",
    Description = "",
    Callback = function()
        game:GetService("ReplicatedStorage").RemoteEvent.RankUpGui:FireServer(table.unpack({
            workspace.Map["Layer 1"].Npcs.Karl,
            workspace.Map["Layer 1"].Npcs.Karl.HumanoidRootPart:FindFirstChild("Dialogue")
        }))
    end
})

Tabs.Main4:AddButton({
    Title = "FullBright",
    Description = "",
    Callback = function()
        task.spawn(function()
            while true do
                task.wait(0.05)

                local lighting = game:GetService("Lighting")

                lighting.Brightness = 2
                lighting.ClockTime = 12
                lighting.FogEnd = 1000000
                lighting.GlobalShadows = false
                lighting.OutdoorAmbient = Color3.new(1, 1, 1)
                lighting.Ambient = Color3.new(1, 1, 1)

                -- Wyłączenie efektów wizualnych (opcjonalne)
                for _, effect in pairs(lighting:GetChildren()) do
                    if effect:IsA("PostEffect") then
                        effect.Enabled = false
                    end
                end
            end
        end)
    end
})

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local unlockCursorEnabled = false
local unlockConnection

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local unlockCursorEnabled = false
local unlockConnection




local Options = {}

Options.MyToggle = Tabs.Main3:AddToggle("MyToggle", {
    Title = "Auto TP Mobs",
    Default = false
})

Options.MobDropdown = Tabs.Main3:AddDropdown("MobSelect", {
    Title = "Select Mobs",
    Values = {"Sakata", "Zuker"},
    Multi = true,
    Default = {"Sakata"}
})

Options.MobDropdown:SetValue({
    Sakata = true,
    Zuker = false
})

local enabled = false
local selectedMobNames = {"Sakata"}

local function getAllSakataMobs()
    local sakataMobs = {}
    for _, obj in pairs(workspace:GetChildren()) do
        if obj.Name == "Sakata" then
            local torso = obj:FindFirstChild("Mob") 
                and obj.Mob:FindFirstChild("Sakata") 
                and obj.Mob.Sakata:FindFirstChild("Torso")
            if torso and torso:IsA("BasePart") then
                table.insert(sakataMobs, torso)
            end
        end
    end
    return sakataMobs
end

local function getAllZukerMobs()
    local zukerMobs = {}
    for _, obj in pairs(workspace:GetChildren()) do
        if obj.Name == "ZukerSpawner" then
            local mobFolder = obj:FindFirstChild("Mob")
            if mobFolder then
                local zuker = mobFolder:FindFirstChild("Zuker")
                if zuker then
                    local torso = zuker:FindFirstChild("Torso")
                    if torso and torso:IsA("BasePart") then
                        table.insert(zukerMobs, torso)
                    end
                end
            end
        end
    end
    return zukerMobs
end

local waitingForMob = false -- żeby nie teleportować w pętli

local function teleportToAvailableMob()
    local player = game.Players.LocalPlayer
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    local mobFound = false

    for _, mobName in ipairs(selectedMobNames) do
        local mobs = {}
        if mobName == "Sakata" then
            mobs = getAllSakataMobs()
        elseif mobName == "Zuker" then
            mobs = getAllZukerMobs()
        end

        for _, torso in ipairs(mobs) do
            if torso and torso:IsDescendantOf(game) then
                mobFound = true
                waitingForMob = false -- resetujemy flagę, bo są moby
                while enabled and torso and torso:IsDescendantOf(game) do
                    hrp.CFrame = CFrame.new(torso.Position + Vector3.new(0, 3, 0))
                    task.wait(0.05)
                end
                if not enabled then return end
            end
        end
    end

    if not mobFound and not waitingForMob then
        waitingForMob = true
        hrp.CFrame = CFrame.new(53, 13, -11)
    end
end

Options.MyToggle:OnChanged(function()
    enabled = Options.MyToggle.Value

    if enabled then
        task.spawn(function()
            while enabled do
                teleportToAvailableMob()
                task.wait(0.1)
            end
        end)
    end
end)

Options.MobDropdown:OnChanged(function(value)
    selectedMobNames = {}
    for name, selected in pairs(value) do
        if selected then
            table.insert(selectedMobNames, name)
        end
    end
end)

Options.MyToggle:SetValue(false)


local locations = {
    ["Shop 1"] = Vector3.new(31, 14, -19.7),
    ["Shop 2"] = Vector3.new(223, -157, -43.6),
    ["Shop 3"] = Vector3.new(-280, -289, -108),
    ["Shop 4"] = Vector3.new(378, -518, 91),
    ["Shop 5"] = Vector3.new(-308, -885, 472),
    ["Spiral Drill of Abyss"] = Vector3.new(268, -926, -72),
    ["Bellua NPC"] = Vector3.new(10, -691, 266),
}

local selectedLocationKey = nil  -- domyślnie nic nie wybrane

local Dropdown = Tabs.Main2:AddDropdown("Dropdown", {
    Title = "Select Location",
    Values = {"Shop 1", "Shop 2", "Shop 3", "Shop 4", "Shop 5", "Spiral Drill of Abyss", "Bellua NPC"},
    Multi = false,
    Default = nil,  -- brak domyślnego wyboru
})

Dropdown:OnChanged(function(value)
    selectedLocationKey = value
end)

Tabs.Main2:AddButton({
    Title = "Click To Teleport",
    Description = "",
    Callback = function()
        if not selectedLocationKey then
            return
        end

        Window:Dialog({
            Title = "Teleport Confirmation",
            Content = "Do you want to teleport to " .. selectedLocationKey .. "?",
            Buttons = {
                {
                    Title = "Confirm",
                    Callback = function()
                        local Players = game:GetService("Players")
                        local LocalPlayer = Players.LocalPlayer
                        local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
                        local hrp = char:WaitForChild("HumanoidRootPart")

                        local position = locations[selectedLocationKey]
                        if position then
                            hrp.CFrame = CFrame.new(position)
                        end
                    end
                },
                {
                    Title = "Cancel",
                    Callback = function()
                        -- Nic nie robimy po anulowaniu
                    end
                }
            }
        })
    end
})


local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local defaultSpeed = 16 -- domyślna prędkość Roblox

local enabled = false
local currentSpeed = defaultSpeed

-- Dodajemy toggle do Main4
local SpeedToggle = Tabs.Main4:AddToggle("MovementSpeedToggle", {
    Title = "Movement Speed",
    Default = false
})

-- Dodajemy slider do Main4
local SpeedSlider = Tabs.Main4:AddSlider("MovementSpeedSlider", {
    Title = "Speed",
    Description = "Set your movement speed",
    Default = defaultSpeed,
    Min = 1,
    Max = 100,
    Rounding = 1
})

-- Funkcja do aktualizacji prędkości
local function updateSpeed()
    local character = LocalPlayer.Character
    if not character then return end
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    if enabled then
        humanoid.WalkSpeed = currentSpeed
    else
        humanoid.WalkSpeed = defaultSpeed
    end
end

-- Obsługa toggle
SpeedToggle:OnChanged(function(value)
    enabled = value
    updateSpeed()
end)

-- Obsługa slidera
SpeedSlider:OnChanged(function(value)
    currentSpeed = value
    if enabled then
        updateSpeed()
    end
end)

-- Ustaw domyślną wartość slidera na obecny walkspeed (jeśli dostępny)
local char = LocalPlayer.Character
if char then
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if humanoid then
        defaultSpeed = humanoid.WalkSpeed
        SpeedSlider:SetValue(defaultSpeed)
        currentSpeed = defaultSpeed
    end
end

-- Po respawnie resetujemy speed, żeby wszystko działało
LocalPlayer.CharacterAdded:Connect(function(char)
    task.wait(1)
    local humanoid = char:WaitForChild("Humanoid")
    if humanoid then
        defaultSpeed = humanoid.WalkSpeed
        SpeedSlider:SetValue(defaultSpeed)
        currentSpeed = defaultSpeed
        updateSpeed()
    end
end)

-- Pętla aktualizująca co 0.1 sekundy
task.spawn(function()
    while true do
        task.wait(0.1)
        if enabled then
            local char = LocalPlayer.Character
            if char then
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = currentSpeed
                end
            end
        end
    end
end)


